'''
미로를 탈출하기 위해 이동해야 하는 최소 칸 수를 반환해야 합니다.

미로 탈출: 엘리스는 가로가 N, 세로가 M의 크기의 격자 모양으로 생긴 공간의 미로에 갇혔습니다.
10111111
10101010
10101011
11100001

1은 이동할 수 있는, 비어있는 공간을 나타내고, 0은 벽이기 때문에 이동할 수 없는 공간을 나타냅니다.
위와 같은 공간이 주어졌을 때, 현재 엘리스가 있는 좌상단 (1, 1)에서 우하단 (N, M)까지 도달하는 데 걸리는 최소의 칸 수를 구하는 프로그램을 작성하세요. 이 때, 시작점과 끝점도 이동하는 칸으로 세어 계산합니다.
단, 상하좌우로 서로 인접한 칸으로만 이동할 수 있습니다. 도착 위치로 이동할 수 없는 경우는 입력으로 주어지지 않습니다.

입력
첫째 줄에 두 개의 정수 N, M이 주어집니다. 2≥N,M≥25
2번째 줄 부터 N개의 줄에 걸쳐서 미로의 정보가 입력됩니다.
미로의 정보를 담고 있는 pMap은 길이가 M인 문자열을 N개 담고 있는 2차원 리스트입니다.

출력
이동해야 하는 최소 칸 수를 출력해야 합니다.
그러기 위해서, maze함수에서 이동해야 하는 최소 칸 수를 반환해야 합니다.

입력 예시
4 8
10111111
10101010
10101011
11100001

출력 예시
17
'''
import queue
import sys
sys.setrecursionlimit(100000)

def maze(n, m, pMap) :
    
    return 0


#main.py
def read_input():
    n, m = [int(v) for v in input().split()]
    returnMap = []
    for _ in range(n):
        line = input()
        returnMap.append(line)
    return n, m, returnMap

def main():
    n, m, pMap = read_input()
    print(maze(n, m, pMap))

if __name__ == "__main__":
    main()



